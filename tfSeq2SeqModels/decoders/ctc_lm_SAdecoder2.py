'''@file rnn_decoder.py
the while_loop implementation'''

import tensorflow as tf
import logging

from .rna_decoder3 import RNADecoder
from tensorflow.python.util import nest
from tfSeq2SeqModels.tools.utils import dense
from tfModels.layers import make_multi_cell
from tfModels.tensor2tensor import common_attention
from ..tools.utils import residual, multihead_attention, ff_hidden

inf = 1e10


class CTC_LM_SA_Decoder(RNADecoder):
    """ctc's `decoder` where the acoustic model is trained with ctc and the distribution
    is shrinked without blank frams. The decoder operates on the shrinked distribution
    which is a sequence labeling problem and the training targets are generated by
    OCD.
    """

    def __init__(self, args, is_train, global_step, embed_table=None, name=None):
        super().__init__(args, is_train, global_step, embed_table, name)
        # use decoder2 heres
        self.num_blocks = args.model.decoder2.num_blocks
        self.num_cell_units = self.num_cell_units_de = args.model.decoder2.num_cell_units
        self.attention_dropout_rate = args.model.decoder2.attention_dropout_rate if is_train else 0.0
        self.residual_dropout_rate = args.model.decoder2.residual_dropout_rate if is_train else 0.0
        self.num_heads = args.model.decoder2.num_heads
        self.num_cell_units_en = args.model.encoder.num_cell_units \
                                if args.model.shrink_hidden else args.dim_output
        self.size_embedding = args.model.decoder2.size_embedding
        self._ff_activation = tf.nn.relu
        self.softmax_temperature = args.model.decoder2.softmax_temperature

    def _decode(self, encoded, len_encoded):
        """
        need to output score
        """
        output = self.decoder_impl(encoded)
        logits = tf.layers.dense(
            inputs=output,
            units=self.dim_output,
            use_bias=False)

        def step(i, preds, cache_decoder, logits):
            preds_emb = self.embedding(preds)
            decoder_input = tf.concat([encoded[:, :i+1, :], preds_emb], axis=-1)
            decoder_input.set_shape([None, None, self.num_cell_units_en+self.size_embedding])

            decoder_output, cache_decoder = self.decoder_with_caching_impl(decoder_input, cache_decoder)
            cur_logit = tf.layers.dense(
                inputs=decoder_output[:, -1, :],
                units=self.dim_output,
                activation=None,
                use_bias=False,
                name='fully_connected')

            if self.is_train and self.args.model.decoder.sample_decoder:
                cur_ids = tf.distributions.Categorical(logits=cur_logit/self.softmax_temperature).sample()
            else:
                cur_ids = tf.to_int32(tf.argmax(cur_logit, -1))
            preds = tf.concat([preds, cur_ids[:, None]], axis=1)
            logits = tf.concat([logits, cur_logit[:, None]], 1)

            return i+1, preds, cache_decoder, logits


        return logits, preds, len_encoded

    def decoder_impl(self, decoder_input):
        # Positional Encoding
        decoder_input += common_attention.add_timing_signal_1d(decoder_input)
        # Dropout
        decoder_output = tf.layers.dropout(decoder_input,
                                           rate=self.residual_dropout_rate,
                                           training=self.is_train)
        # Bias for preventing peeping later information
        self_attention_bias = common_attention.attention_bias_lower_triangle(tf.shape(decoder_input)[1])

        # Blocks
        with tf.variable_scope("block_{}".format(0)):
            # Multihead Attention (self-attention)
            decoder_output = multihead_attention(
                                      query_antecedent=decoder_output,
                                      memory_antecedent=None,
                                      bias=self_attention_bias,
                                      total_key_depth=self.num_cell_units,
                                      total_value_depth=self.num_cell_units,
                                      num_heads=self.num_heads,
                                      dropout_rate=self.attention_dropout_rate,
                                      output_depth=self.num_cell_units,
                                      name="decoder_self_attention",
                                      summaries=True)
            # Feed Forward
            decoder_output = residual(decoder_output,
                                      ff_hidden(
                                          decoder_output,
                                          hidden_size=4 * self.num_cell_units,
                                          output_size=self.num_cell_units,
                                          activation=self._ff_activation),
                                      dropout_rate=self.residual_dropout_rate)

        for i in range(1, self.num_blocks-1, 1):
            # print('here!!!!!!!{}'.format(i))
            with tf.variable_scope("block_{}".format(i)):
                # Multihead Attention (self-attention)
                decoder_output = residual(decoder_output,
                                          multihead_attention(
                                              query_antecedent=decoder_output,
                                              memory_antecedent=None,
                                              bias=self_attention_bias,
                                              total_key_depth=self.num_cell_units,
                                              total_value_depth=self.num_cell_units,
                                              num_heads=self.num_heads,
                                              dropout_rate=self.attention_dropout_rate,
                                              output_depth=self.num_cell_units,
                                              name="decoder_self_attention",
                                              summaries=True),
                                          dropout_rate=self.residual_dropout_rate)
                # Feed Forward
                decoder_output = residual(decoder_output,
                                          ff_hidden(
                                              decoder_output,
                                              hidden_size=4 * self.num_cell_units,
                                              output_size=self.num_cell_units,
                                              activation=self._ff_activation),
                                          dropout_rate=self.residual_dropout_rate)

        return decoder_output

    def decoder_with_caching_impl(self, decoder_input, decoder_cache):
        # Positional Encoding
        decoder_input += common_attention.add_timing_signal_1d(decoder_input)
        # Dropout
        decoder_output = tf.layers.dropout(decoder_input,
                                           rate=self.residual_dropout_rate,
                                            training=self.is_train)
        new_cache = []

        # rest block without residual
        with tf.variable_scope("block_{}".format(0)):
            # Multihead Attention (self-attention)
            # the caching_impl only need to calculate decoder_output[:, -1:, :]!
            decoder_output = multihead_attention(
                                          query_antecedent=decoder_output,
                                          memory_antecedent=None,
                                          bias=None,
                                          total_key_depth=self.num_cell_units,
                                          total_value_depth=self.num_cell_units,
                                          num_heads=self.num_heads,
                                          dropout_rate=self.attention_dropout_rate,
                                          num_queries=1,
                                          output_depth=self.num_cell_units,
                                          name="decoder_self_attention",
                                          summaries=False)

            # Feed Forward
            decoder_output = residual(decoder_output,
                                      ff_hidden(
                                          decoder_output,
                                          hidden_size=4 * self.num_cell_units,
                                          output_size=self.num_cell_units,
                                          activation=tf.nn.relu),
                                      dropout_rate=self.residual_dropout_rate)

            decoder_output = tf.concat([decoder_cache[:, :, 0, :], decoder_output], axis=1)
            new_cache.append(decoder_output[:, :, None, :])
        # rest block with residual
        for i in range(1, self.num_blocks, 1):
            with tf.variable_scope("block_{}".format(i)):
                # Multihead Attention (self-attention)
                # the caching_impl only need to calculate decoder_output[:, -1:, :]!
                decoder_output = residual(decoder_output[:, -1:, :],
                                          multihead_attention(
                                              query_antecedent=decoder_output,
                                              memory_antecedent=None,
                                              bias=None,
                                              total_key_depth=self.num_cell_units,
                                              total_value_depth=self.num_cell_units,
                                              num_heads=self.num_heads,
                                              dropout_rate=self.attention_dropout_rate,
                                              num_queries=1,
                                              output_depth=self.num_cell_units,
                                              name="decoder_self_attention",
                                              summaries=False),
                                          dropout_rate=self.residual_dropout_rate)

                # Feed Forward
                decoder_output = residual(decoder_output,
                                          ff_hidden(
                                              decoder_output,
                                              hidden_size=4 * self.num_cell_units,
                                              output_size=self.num_cell_units,
                                              activation=tf.nn.relu),
                                          dropout_rate=self.residual_dropout_rate)

                decoder_output = tf.concat([decoder_cache[:, :, i, :], decoder_output], axis=1)
                new_cache.append(decoder_output[:, :, None, :])

        new_cache = tf.concat(new_cache, axis=2)  # [batch_size, n_step, num_blocks, num_hidden]

        return decoder_output, new_cache

    def beam_decode_rerank(self, encoded, len_encoded):
        """
        beam search rerank at end with language model integration (self-attention model)
        the input to te score is <sos> + tokens !!!
        """
        lambda_lm = self.args.lambda_lm
        beam_size = self.beam_size
        batch_size = tf.shape(len_encoded)[0]

        # beam search Initialize
        # repeat each sample in batch along the batch axis [1,2,3,4] -> [1,1,2,2,3,3,4,4]
        encoded = tf.tile(encoded[:, None, :, :],
                          multiples=[1, beam_size, 1, 1]) # [batch_size, beam_size, *, hidden_units]
        encoded = tf.reshape(encoded,
                             [batch_size * beam_size, -1, encoded.get_shape()[-1].value])
        # [[<blk>, <blk>, ..., <blk>,]], shape: [batch_size * beam_size, 1]
        token_init = tf.fill([batch_size * beam_size, 1], self.args.sos_idx)
        logits_init = tf.zeros([batch_size * beam_size, 1, self.dim_output], dtype=tf.float32)
        # the score must be [0, -inf, -inf, ...] at init, for the preds in beam is same in init!!!
        scores = tf.constant([0.0] + [-inf] * (beam_size - 1), dtype=tf.float32)  # [beam_size]
        scores = tf.tile(scores, multiples=[batch_size])  # [batch_size * beam_size]
        cache_init = tf.zeros([batch_size*beam_size,
                               0,
                               self.lm.args.model.decoder.num_blocks,
                               self.lm.args.model.decoder.num_cell_units])

        # create decoder cell
        self.cell = make_multi_cell(
            num_cell_units=self.num_cell_units_de,
            is_train=self.is_train,
            keep_prob=1-self.dropout,
            rnn_mode='BLOCK',
            num_layers=self.num_layers,
            dim_output=self.dim_output)

        # collect the initial states of lstms used in decoder.
        all_initial_states = {}
        all_initial_states["state_decoder"] = self.zero_state(batch_size * beam_size, dtype=tf.float32)
        base_indices = tf.reshape(tf.tile(tf.range(batch_size)[:, None], multiples=[1, beam_size]), shape=[-1])

        def step(i, preds, scores, all_states, logits, cache):
            """
            the cache has no specific shape, so no can be put in the all_states
            """
            state_decoder = all_states["state_decoder"]
            prev_emb = self.embedding(preds[:, -1])
            decoder_input = tf.concat([encoded[:, i, :], prev_emb], axis=1)
            decoder_input.set_shape([None, self.size_embedding + self.num_cell_units_en])

            # Lstm part
            with tf.variable_scope("decoder_lstms"):
                output_decoder, state_decoder = tf.contrib.legacy_seq2seq.rnn_decoder(
                    decoder_inputs=[decoder_input],
                    initial_state=state_decoder,
                    cell=self.cell)
                all_states["state_decoder"] = state_decoder
                # output_decoder = [tf.concat([output_decoder[0], encoded[:, i, :]], axis=1)]

            cur_logit = tf.layers.dense(
                inputs=output_decoder[0],
                units=self.dim_output,
                activation=None,
                use_bias=False,
                name='fully_connected')

            logits = tf.concat([logits, cur_logit[:, None]], 1)
            z = tf.nn.log_softmax(cur_logit) # [batch*beam, size_output]
            # the langueage model infer
            if self.args.model.shallow_fusion:
                preds_emb = self.lm.decoder.embedding(preds)

                with tf.variable_scope(self.args.top_scope, reuse=True):
                    with tf.variable_scope(self.args.lm_scope):
                        lm_output, cache = self.lm.decoder.decoder_with_caching_impl(preds_emb, cache)
                        logit_lm = dense(
                            inputs=lm_output[:, -1, :],
                            units=self.dim_output,
                            kernel=tf.transpose(self.lm.decoder.fully_connected),
                            use_bias=False)

                z_lm = lambda_lm * tf.nn.log_softmax(logit_lm) # [batch*beam, size_output]
            else:
                z_lm = tf.zeros_like(z)

            # rank the combined scores
            next_scores, next_preds = tf.nn.top_k(z+z_lm, k=beam_size, sorted=True)
            next_preds = tf.to_int32(next_preds)

            # beamed scores & Pruning
            scores = scores[:, None] + next_scores  # [batch_size * beam_size, beam_size]
            scores = tf.reshape(scores, shape=[batch_size, beam_size * beam_size])

            _, k_indices = tf.nn.top_k(scores, k=beam_size)
            k_indices = base_indices * beam_size * beam_size + tf.reshape(k_indices, shape=[-1])  # [batch_size * beam_size]
            # Update scores.
            scores = tf.reshape(scores, [-1])
            scores = tf.gather(scores, k_indices)
            # Update predictions.
            next_preds = tf.gather(tf.reshape(next_preds, shape=[-1]), indices=k_indices)
            # k_indices: [0~batch*beam*beam], preds: [0~batch*beam]
            preds = tf.gather(preds, indices=k_indices // beam_size)
            cache = tf.gather(cache, indices=k_indices // beam_size)
            preds = tf.concat((preds, next_preds[:, None]), axis=1)  # [batch_size * beam_size, i]

            return i+1, preds, scores, all_states, logits, cache

        _, preds, scores_am, _, logits, cache = tf.while_loop(
            cond=lambda i, *_: tf.less(i, tf.shape(encoded)[1]),
            body=step,
            loop_vars=[0, token_init, scores, all_initial_states, logits_init, cache_init],
            shape_invariants=[tf.TensorShape([]),
                              tf.TensorShape([None, None]),
                              tf.TensorShape([None]),
                              nest.map_structure(lambda t: tf.TensorShape(t.shape), all_initial_states),
                              tf.TensorShape([None, None, self.dim_output]),
                              tf.TensorShape([None, None, None, None])]
            )

        len_encoded = tf.reshape(tf.tile(len_encoded[:, None], multiples=[1, beam_size]), [-1])
        with tf.variable_scope(self.args.top_scope, reuse=True):
            with tf.variable_scope(self.args.lm_scope):
                scores_lm, distribution = self.lm.decoder.score(preds, len_encoded)

        # [batch_size * beam_size, ...]
        preds = preds[:, 1:]
        logits = logits[:, 1:, :]
        not_padding = tf.to_int32(tf.sequence_mask(len_encoded, maxlen=tf.shape(encoded)[1]))
        preds *= not_padding

        # [batch_size , beam_size, ...]
        scores_lm = self.args.lambda_rerank * scores_lm
        scores = scores_am + scores_lm
        # tf.nn.top_k is used to sort `scores`
        scores_sorted, sorted = tf.nn.top_k(tf.reshape(scores, [batch_size, beam_size]),
                                            k=beam_size,
                                            sorted=True)

        sorted = base_indices * beam_size + tf.reshape(sorted, shape=[-1])  # [batch_size * beam_size]

        # [batch_size * beam_size, ...]
        logits_sorted = tf.gather(logits, sorted)
        preds_sorted = tf.gather(preds, sorted)
        scores_lm_sorted = tf.gather(scores_lm, sorted)
        scores_am_sorted = tf.gather(scores_am, sorted)

        # [batch_size, beam_size, ...]
        scores_lm_sorted = tf.reshape(scores_lm_sorted, shape=[batch_size, beam_size])
        scores_am_sorted = tf.reshape(scores_am_sorted, shape=[batch_size, beam_size])
        preds_sorted = tf.reshape(preds_sorted, shape=[batch_size, beam_size, -1])  # [batch_size, beam_size, max_length]
        logits = tf.reshape(logits_sorted, [batch_size, beam_size, -1, self.dim_output])
        len_encoded = tf.reshape(len_encoded, [batch_size, beam_size])

        # return logits, final_preds, len_encoded
        return [preds_sorted, scores_am_sorted, scores_lm_sorted], preds_sorted[:, 0, :], len_encoded

    def forward(self, i, preds, state_decoder):
        """
        self.cell
        self.encoded
        """
        prev_emb = self.embedding(preds[:, -1])
        decoder_input = tf.concat([self.encoded[:, i, :], prev_emb], axis=1)
        decoder_input.set_shape([None, self.num_cell_units_en+self.size_embedding])

        with tf.variable_scope(self.name or 'decoder', reuse=True):
            with tf.variable_scope("decoder_lstms"):
                output_decoder, state_decoder = tf.contrib.legacy_seq2seq.rnn_decoder(
                    decoder_inputs=[decoder_input],
                    initial_state=state_decoder,
                    cell=self.cell)

            cur_logit = tf.layers.dense(
                inputs=output_decoder[0],
                units=self.dim_output,
                activation=None,
                use_bias=False,
                name='fully_connected'
                )
            cur_ids = tf.to_int32(tf.argmax(cur_logit, -1))

        return cur_ids, state_decoder
